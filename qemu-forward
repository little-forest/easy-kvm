#!/bin/bash
#===============================================================================
# qemu-forward : QEMU event hook script for CentOS7
#
# Date    : 2015/1/21 Start
# Copyright: Original code by Yusuke Komori.
#                  Copyright (c) 2015-2017. Yusuke Komori, All rights reserved.
#===============================================================================

SCRIPT_BASE=`echo $(cd $(dirname $0); pwd)`
SCRIPT_NAME=`basename $0`
CONF_FILE="/etc/qemu-forward.conf"

# for applying interface to firewall zone
BR_NAME=virbr0
BR_ZONE=internal

#-------------------------------------------------------------------------------
#- common functions ------------------------------------------------------------

__setupcolor() { #{{{
  # Escape sequence
  ESC="\e["
  ESCEND=m
  C_OFF=${ESC}${ESCEND}

  # normal
  C_BLACK="${ESC}30${ESCEND}"
  C_RED="${ESC}31${ESCEND}"
  C_GREEN="${ESC}32${ESCEND}"
  C_YELLOW="${ESC}33${ESCEND}"
  C_BLUE="${ESC}34${ESCEND}"
  C_MAGENTA="${ESC}35${ESCEND}"
  C_CYAN="${ESC}36${ESCEND}"
  C_WHITE="${ESC}37${ESCEND}"

  RES_COL=60
  MOVE_TO_COL="echo -en \\033[${RES_COL}G"
}
#}}}

__show_ok() { #{{{
  [ "${SILENT_MODE}" ] && return
  [[ "$1" && "$1" -gt 0 ]] && echo -en "\\033[${1}G"
  echo -en "[ ${C_GREEN}OK${C_OFF}"
  [ "$2" ] && echo " ]$2" || echo " ]"
}
#}}}

__show_info() { #{{{
  [[ -n "${SILENT_MODE}" ]] && return
  [[ "$1" == "-n" ]] && echo -en "${C_CYAN}${2}${C_OFF}" || echo -e "${C_CYAN}${1}${C_OFF}"
}
#}}}

__show_error() { #{{{
  echo -e "[${C_RED}ERROR${C_OFF}] $1"
}
#}}}

__error_end() { #{{{
  __show_error "$1"; exit 1
}
#}}}

# usage
_usage() { #{{{
  [ "$1" ] && showError "$1"
  echo "usege : $SCRIPT_NAME [-(d|v)] DOMAIN_NAME (started|stopped)"
  echo '          -d : Dry run'
  echo '          -v : Verbose'
  echo ''
  echo "configuration file : $CONF_FILE"
  echo '  each columns are as follows'
  echo ''
  echo '     column     :  example'
  echo '---------------------------------------------------'
  echo '  DomainName    : default'
  echo '  Zone          : public'
  echo '  Source        : 22, 22/tcp, 137/udp'
  echo '  Destination   : 192.168.122.2, 192.168.122.2:2222'
  echo '  DestInterface : virbr0'
  exit 1
}
#}}}

_change_interface() { #{{{
  ${FIREWALL_CMD} --query-interface="$BR_NAME" --zone="$BR_ZONE" > /dev/null 2>&1 || local NEED_CHANGE=true

  if [ ! "$NEED_CHANGE" ]; then
    _log "no need for changing zone of $BR_NAME"
    return
  fi

  local RET
  if [ ! "$DRY_RUN" ]; then
    ${FIREWALL_CMD} --change-interface="$BR_NAME" --zone="$BR_ZONE" > /dev/null 2>&1; RET=$?
    if [ ! "$RET" -eq 0 ]; then
      _error "changing zone failed."
      return $RET
    fi
    _log "${C_GREEN}zone changed.${C_OFF} interface:$BR_NAME => zone:$BR_ZONE"
  else
    _log "${C_GREEN}zone will changed.${C_OFF} interface:$BR_NAME => zone:$BR_ZONE"
  fi
}
#}}}

_add_rule_firewall_cmd() { #{{{
  local ZONE="$1"
  local PROTO="$2"
  local HOST_PORT="$3"
  local GUEST_IP_ADDR="$4"
  local GUEST_PORT="$5"

  local DETAIL="zone:${ZONE} ${HOST_PORT}/${PROTO} ==> ${GUEST_IP_ADDR}:${GUEST_PORT}" 

  local FWDOPT="port=${HOST_PORT}:proto=${PROTO}:toaddr=${GUEST_IP_ADDR}:toport=${GUEST_PORT}"
  ${FIREWALL_CMD} --zone=${ZONE} --query-forward-port="${FWDOPT}" > /dev/null 2>&1 || local NEEDS_CHANGE=yes
  if [[ ! "${NEEDS_CHANGE}" ]]; then
    _log "no need for forwarding port : ${DETAIL}"
    return 0
  fi

  if [ ! "$DRY_RUN" ]; then
    local OPT="--zone=${ZONE} --add-forward-port=${FWDOPT}"
    ${FIREWALL_CMD} ${OPT} > /dev/null 2>&1; local RET=$?
    if [ ! "$RET" -eq 0 ]; then
      _error "firewall-cmd failed. (${FIREWALL_CMD} ${OPT} retcode:$RET)"
      return $RET
    fi
  fi
  _log "${C_GREEN}forward-port added.${C_OFF} ${DETAIL}"
}
#}}}

_add_rule_iptables() { #{{{
  local PROTO="$1"
  local LOCAL_IF="$2"
  local HOST_PORT="$3"
  local GUEST_IP_ADDR="$4"
  local GUEST_PORT="$5"

  local DETAIL="${LOCAL_IF}::${HOST_PORT}/${PROTO} ==> ${GUEST_IP_ADDR}:${GUEST_PORT}" 
  if [ ! "$DRY_RUN" ]; then
    local OPT="-i ${LOCAL_IF} -p ${PROTO} --dport ${HOST_PORT} -j DNAT --to-destination ${GUEST_IP_ADDR}:${GUEST_PORT}"
    ${IPTABLES} -t nat -A PREROUTING ${OPT} > /dev/null 2>&1; local RET=$?
    if [ ! "$RET" -eq 0 ]; then
      _error "iptables failed. (${IPTABLES} -t nat -A PREROUTING ${OPT})"
      return $RET
    fi

    ${IPTABLES} -t nat -A OUTPUT ${OPT} > /dev/null 2>&1; local RET=$?
    if [ ! "$RET" -eq 0 ]; then
      _error "iptables failed. (${IPTABLES} -t nat -A OUT ${OPT})"
      return $RET
    fi
  fi
  _log "${C_GREEN}forward-port added.${C_OFF} $DETAIL"
}
#}}}

_add_rule() { #{{{
  local GUEST_NAME="$1"
  local ZONE="$2"
  local PROTO="$3"
  local HOST_PORT="$4"
  local GUEST_IP_ADDR="$5"
  local GUEST_PORT="$6"

  # add port forwarding
  if [[ "${FIREWALL_CMD}" ]]; then
    _add_rule_firewall_cmd ${ZONE} ${PROTO} ${HOST_PORT} ${GUEST_IP_ADDR} ${GUEST_PORT}
    local RET=$?
    [[ ! $RET -eq 0 ]] && return $RET
  else
    _add_rule_iptables ${PROTO} eth0 ${HOST_PORT} ${GUEST_IP_ADDR} ${GUEST_PORT}
    local RET=$?
    [[ ! $RET -eq 0 ]] && return $RET
  fi

  ## enable packets to guest
  #if [ "${PROTO}" = "tcp" ]; then
  #  local OPT="-m state --state NEW -m tcp -d ${GUEST_IP_ADDR} --dport ${GUEST_PORT}"
  #elif [ ${PROTO} = "udp" ]; then
  #  local OPT="-d ${GUEST_IP_ADDR} --dport ${GUEST_PORT}"
  #else
  #  _error "Illegal protocol : ${PROTO}"
  #  return 1
  #fi

  #DETAIL="interface:${OUT_IF} destination:${GUEST_IP_ADDR}:${GUEST_PORT}/${PROTO}"

  ## check if port is already opened
  #while read _NUM _PKTS _BYTES _TARGET _PROT _OPT _IN _OUT _SRC _DST _ACTION; do
  #  [ "$DRY_RUN" ] && echo "  Checking... $_NUM $_TARGET $_PROT $_OPT $_IN $_OUT $_SRC $_DST $_ACTION"
  #  if [ "$_DST" = "$GUEST_IP_ADDR" ] && [ "$_TARGET" = "ACCEPT" ] && \
  #    [ "$_PROT" = "$PROTO" ] && [ "$_OUT" = "$OUT_IF" ] && \
  #    [[ "$_ACTION" =~ .*${PROTO}\ dpt:${GUEST_PORT}$ ]]; then
  #    _log "${C_BLUE}port is already opened, do nothing.${C_OFF} $DETAIL"
  #    return 0
  #  fi
  #done < <(iptables -t filter -nvL FORWARD --line-numbers | sed -re '1,2d')

  ## do open
  #if [ ! "$DRY_RUN" ]; then
  #  iptables -I FORWARD -o ${OUT_IF} -p ${PROTO} ${OPT} -j ACCEPT 2>/dev/null; RET=$?
  #  if [ ! "$RET" -eq 0 ]; then
  #    _error "opening port failed. $DETAIL"
  #    return $RET
  #  fi
  #fi
  #_log "${C_GREEN}port opened.${C_OFF} $DETAIL"

  return 0
}
#}}}

_delete_rule_firewall_cmd() { #{{{
  local ZONE="$1"
  local PROTO="$2"
  local HOST_PORT="$3"
  local GUEST_IP_ADDR="$4"
  local GUEST_PORT="$5"

  DETAIL="${HOST_PORT}/${PROTO} ==> ${GUEST_IP_ADDR}:${GUEST_PORT}" 
  local FWD_OPT="port=${HOST_PORT}:proto=${PROTO}:toaddr=${GUEST_IP_ADDR}:toport=${GUEST_PORT}"

  ${FIREWALL_CMD} --zone=${ZONE} "--query-forward-port=${FWD_OPT}" > /dev/null 2>&1; RET=$?
  if [ "$RET" -eq 0 ]; then
    RET=0
    if [ ! "$DRY_RUN" ]; then
      ${FIREWALL_CMD} --zone=${ZONE} "--remove-forward-port=${FWD_OPT}" > /dev/null 2>&1; RET=$?
    fi
    if [ "$RET" -eq 0 ]; then
      _log "${C_GREEN}forward-port removed.${C_OFF} $DETAIL"
    else
      _error "removing forward-port failed. $DETAIL"
    fi
  else
    _log "${C_YELLOW}forward rule is not found.${C_OFF} $DETAIL"
  fi
}
#}}}

_delete_rule_iptables() { #{{{
  local PROTO="$1"
  local LOCAL_IF="$2"
  local HOST_PORT="$3"
  local GUEST_IP_ADDR="$4"
  local GUEST_PORT="$5"

  local DETAIL="${LOCAL_IF}::${HOST_PORT}/${PROTO} ==> ${GUEST_IP_ADDR}:${GUEST_PORT}" 
  if [ ! "$DRY_RUN" ]; then
    local OPT="-i ${LOCAL_IF} -p ${PROTO} --dport ${HOST_PORT} -j DNAT --to-destination ${GUEST_IP_ADDR}:${GUEST_PORT}"
    ${IPTABLES} -t nat -D PREROUTING ${OPT} > /dev/null 2>&1; local RET=$?
    if [ ! "$RET" -eq 0 ]; then
      _error "iptables failed. (${IPTABLES} -t nat -D PREROUTING ${OPT})"
      return $RET
    fi

    ${IPTABLES} -t nat -D OUTPUT ${OPT} > /dev/null 2>&1; local RET=$?
    if [ ! "$RET" -eq 0 ]; then
      _error "iptables failed. (${IPTABLES} -t nat -D OUT ${OPT})"
      return $RET
    fi
  fi
  _log "${C_GREEN}forward-port deleted.${C_OFF} $DETAIL"
}
#}}}

_delete_rule() { #{{{
  local GUEST_NAME="$1"
  local ZONE="$2"
  local PROTO="$3"
  local HOST_PORT="$4"
  local GUEST_IP_ADDR="$5"
  local GUEST_PORT="$6"
  local OUT_IF="$7"

  local RET=0
  local DETAIL=''

  # delete port forwarding
  if [[ "${FIREWALL_CMD}" ]]; then
    _delete_rule_firewall_cmd ${ZONE} ${PROTO} ${HOST_PORT} ${GUEST_IP_ADDR} ${GUEST_PORT}
    local RET=$?
    [[    RE  -eq 0 ]] && return $RET
  #else
  #  _add_rule_iptables ${PROTO} eth0 ${HOST_PORT} ${GUEST_IP_ADDR} ${GUEST_PORT}
  #  local RET=$?
  #  [[ ! $RET -eq 0 ]] && return $RET
  fi

  # delete iptables rule
  local DELETED=''
  DETAIL="interface:${OUT_IF} destination:${GUEST_IP_ADDR}:${GUEST_PORT}/${PROTO}"
  ${IPTABLES} -t filter -nvL FORWARD --line-numbers | sed -re '1,2d' \
    | while read NUM PKTS BYTES TARGET PROT OPT IN OUT SRC DST ACTION; do
    [ "$DRY_RUN" ] && echo "  Checking... $NUM $TARGET $PROT $OPT $IN $OUT $SRC $DST $ACTION"
    if [ "$DST" = "$GUEST_IP_ADDR" ] && [ "$TARGET" = "ACCEPT" ] && \
      WARD --line-numbers
      [[ "$ACTION" =~ .*${PROTO}\ dpt:${GUEST_PORT}$ ]]; then

      local RULE="$NUM $TARGET $PROT $OPT $IN $OUT $SRC $DEST $ACTION"
      if [ ! "$DRY_RUN" ]; then
        ${IPTABLES} -t filter -D FORWARD "$NUM"; RET=$?
        if [ "$RET" -eq 0 ]; then
          _log "${C_GREEN}rule deleted.${C_OFF} $DETAIL $ACTION"  
          DELETED=yes
        else
          _error "delete rule failed. $DETAIL $ACTION"
        fi
      else
        _log "${C_GREEN}iptables rule will delete.${C_OFF} : $RULE"
        DELETED=yes
      fi
    fi
  done

  [[ ! "$DELETED" ]] && _log "${C_YELLOW}rule is not dound.${C_OFF} : $DETAIL"
  return 0
}
#}}}

_error() { #{{{
  local MSG="[$TARGET_GUEST_NAME : $EVENT] ERROR: $1"
  if [ ! "$DRY_RUN" ]; then
    logger -t "${SCRIPT_NAME}" "$MSG"
    [ "$VERBOSE" ] && echo -e "${C_RED}${MSG}${C_OFF}" 1>&2 
  else
    echo -e "${C_RED}${MSG}${C_OFF}" 1>&2
  fi
}
#}}}

_log() { #{{{
  local MSG="${C_CYAN}[$TARGET_GUEST_NAME : $EVENT]${C_OFF} $1"
  local RAW_MSG=`echo -e "${MSG}" | sed -r "s:\x1B\[[0-9;]*[mk]::g"`
  if [ ! "$DRY_RUN" ]; then
    logger -t "${SCRIPT_NAME}" "${RAW_MSG}"
    [ "$VERBOSE" ] && echo -e "$MSG" 
  else
    echo -e "$MSG"
  fi
}
#}}}

__setupcolor

# check options {{{
if [ $# -eq 0 ]; then
  _usage
fi

if [ "$1" = "-d" ]; then
  DRY_RUN=yes
  shift 1
elif [ "$1" = "-v" ]; then
  VERBOSE=yes
  shift 1
fi

TARGET_GUEST_NAME="$1"
EVENT="$2"

# check event type
if [[ "$EVENT" != 'started' ]] && [[ "$EVENT" != 'stopped' ]]; then
  _log "do nothing for this event."
  exit 0
fi

# check config file
if [ ! -f "$CONF_FILE" ]; then
  _error "$CONF_FILE is not found."
  exit 1
fi
#}}}

# main process

# check firewall-cmd is available
FIREWALL_CMD=`which firewall-cmd 2> /dev/null`
IPTABLES=`which iptables 2> /dev/null`
[[ ! "$IPTABLES" ]] && __error_end 'iptables is not available.'

while read DOMAIN_NAME ZONE SOURCE DESTINATION DEST_IF; do
  # skip comments and blank line
  DOMAIN_NAME=`echo "$DOMAIN_NAME" | tr -d "\r" | tr -d "\n"`
  if [ `echo "$DOMAIN_NAME" | egrep '^[ \t]*[#;]' | wc -l` -gt 0 ] || [ "$DOMAIN_NAME" == "" ]; then
    continue
  fi

  # check target domain
  [[ "$DOMAIN_NAME" != "$TARGET_GUEST_NAME" ]] && continue

  SRC_PORT=`echo "$SOURCE" | cut -d '/' -f 1`
  PROTO=`echo "$SOURCE" | cut -d '/' -f 2`
  [[ "$PROTO" = "$SOURCE" ]] && PROTO=tcp

  DEST_IP=`echo "$DESTINATION" | cut -d ':' -f 1`
  DEST_PORT=`echo "$DESTINATION" | cut -d ':' -f 2`
  [[ "$DEST_PORT" = "$DESTINATION" ]] && DEST_PORT="$SRC_PORT"

  case "$EVENT" in
    started)
      _change_interface
      _add_rule "$TARGET_GUEST_NAME" "$ZONE" "$PROTO" "$SRC_PORT" "$DEST_IP" "$DEST_PORT" "$DEST_IF"
      ;;
    stopped)
      _delete_rule "$TARGET_GUEST_NAME" "$ZONE" "$PROTO" "$SRC_PORT" "$DEST_IP" "$DEST_PORT" "$DEST_IF"
      ;;
  esac
done < "$CONF_FILE"

exit 0

# vim: ts=2 sw=2 sts=2 et nu foldmethod=marker
